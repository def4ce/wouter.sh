<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wouter in &#39;t Veld</title>
    <link>/</link>
    <description>Recent content on Wouter in &#39;t Veld</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Wouter in &#39;t Veld</copyright>
    <lastBuildDate>Tue, 16 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate .gitignore from the command line</title>
      <link>/posts/professional/git-ignore-from-cli/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/professional/git-ignore-from-cli/</guid>
      <description>You can generate .gitignore files from the command line by using the api of gitignore.io.
To do this you need to create a git alias.
git config --global alias.ignore \ &#39;!gi() { curl -sL https://www.gitignore.io/api/$@ ;}; gi&#39;  When you created the alias you have access to the git ignore command. If you run git ignore list you will get a list of supported languages, tools, os&amp;rsquo;s and applications.
For example, running git ignore python,visualstudiocode,osx will dump a list of ignored files for Python, VSCode and OS X to stdout.</description>
    </item>
    
    <item>
      <title>Open a pull-request to GitHub from the CLI</title>
      <link>/posts/professional/pull-request-from-cli/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/professional/pull-request-from-cli/</guid>
      <description>After spending some time getting git pull-request to work I decided it was to much of a hassle and would try to make my own function.
If you are on OS X, drop the following in your .bashrc or your preferred $SHELL equivalent and source it:
function git_pull_request() { REPOURL=`git config --get remote.origin.url` REPO=`basename -s .git $REPOURL` BRANCH=`git symbolic-ref -q --short HEAD` GIT_USER=`git config user.name` if [[ -z $GIT_USER ]] then echo &amp;quot;Please set your Git user name by running: git config --global user.</description>
    </item>
    
    <item>
      <title>Disable SSH on your EC2 instances</title>
      <link>/posts/professional/aws-disable-ssh/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/professional/aws-disable-ssh/</guid>
      <description>If you have to SSH into your servers, then your automation has failed.
I know, crazy&amp;hellip;
To make the transition to this mindset easier you could just disable access to port 22 in your instance security group configuration. This will highlight the things you still need to automate while still having the ability to enable access your instances to remedy immediate operational issues.
Disabling inbound SSH will stop you from cheating.</description>
    </item>
    
    <item>
      <title>Setting up an SSH server as a proxy</title>
      <link>/posts/professional/setting-up-ssh-server-proxy/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/professional/setting-up-ssh-server-proxy/</guid>
      <description>Recently I setup an SSH server at home. This allows me, besides the obvious, to create an SSH tunnel to encrypt my connections and circumvent restrictions. This is particularly useful on public Wi-Fi networks. These networks may block certain services and other people using the network might be less friendly.
Installing Your Linux server most likely already has openssh-server installed. If it hasn&amp;rsquo;t, installing SSH server is easy. Because I use CentOS the examples will reflect that.</description>
    </item>
    
    <item>
      <title></title>
      <link>/cv/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/cv/</guid>
      <description>Wouter in &amp;rsquo;t Veld Experienced Cloud Engineer designing, building and maintaining highly available, scalable and resilient cloud solutions for Coolblue in Amazon Web Services.
email: hashbang@wouter.sh twitter: @wouterintveld  Experience Cloud Engineer @ Coolblue Oct. 2015 - present
Focused on enabling developers. Designing and building a platform that makes it easy to deploy applications on Amazon Web Services.
My team designs, builds and maintains the foundation of the platform. We do everything from code.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hey internet, welcome to my blog.
My name is Wouter and I&amp;rsquo;m Cloud Engineer at Coolblue, building a cloud platform for our developers to deploy their apps on.
I am also father to Sid and Fay, partner to Donna and a gamer.</description>
    </item>
    
  </channel>
</rss>