<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Wouter in &#39;t Veld</title>
        <link>https://wouters.sh/posts/</link>
        <description>Recent content in Posts on Wouter in &#39;t Veld</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Wouter in &#39;t Veld</copyright>
        <lastBuildDate>Wed, 24 Jul 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://wouters.sh/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Open a pull-request to GitHub from the CLI</title>
            <link>https://wouters.sh/posts/professional/pull-request-from-cli/</link>
            <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://wouters.sh/posts/professional/pull-request-from-cli/</guid>
            <description>After spending some time getting git pull-request to work I decided it was to much of a hassle and would try to make my own function.
If you are on OS X, drop the following in your .bashrc or your preferred $SHELL equivalent and source it:
function git_pull_request() { REPOURL=`git config --get remote.origin.url` REPO=`basename -s .git $REPOURL` BRANCH=`git symbolic-ref -q --short HEAD` GIT_USER=`git config user.name` if [[ -z $GIT_USER ]] then echo &amp;#34;Please set your Git user name by running: git config --global user.</description>
            <content type="html"><![CDATA[<p>After spending some time getting <a href="https://www.git-scm.com/docs/git-request-pull" target="_blank">git pull-request</a>
 to work I decided it was to much of a hassle and would try to make my own function.</p>
<p>If you are on <code>OS X</code>, drop the following in your <code>.bashrc</code> or your preferred <code>$SHELL</code> equivalent and source it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">function</span> git_pull_request<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      REPOURL<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>git config --get remote.origin.url<span style="color:#e6db74">`</span>
      REPO<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename -s .git $REPOURL<span style="color:#e6db74">`</span>

      BRANCH<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>git symbolic-ref -q --short HEAD<span style="color:#e6db74">`</span>

      GIT_USER<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>git config user.name<span style="color:#e6db74">`</span> 

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z $GIT_USER <span style="color:#f92672">]]</span>
          <span style="color:#66d9ef">then</span>
              echo <span style="color:#e6db74">&#34;Please set your Git user name by running: git config --global user.name &#39;\$USERNAME&#39;&#34;</span>
              exit <span style="color:#ae81ff">1</span>
      <span style="color:#66d9ef">fi</span>

      PR_URL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">${</span>GIT_USER<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>REPO<span style="color:#e6db74">}</span><span style="color:#e6db74">/pull/new/</span><span style="color:#e6db74">${</span>BRANCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

      open $PR_URL
<span style="color:#f92672">}</span>
</code></pre></div><p>Now you will have access to the <code>git_pull_request</code> command. After you pushed your changes you can use this command from anywhere in the repository and it will open your default browser with a new GitHub pull-request.</p>
]]></content>
        </item>
        
        <item>
            <title>Generate .gitignore from the command line</title>
            <link>https://wouters.sh/posts/professional/git-ignore-from-cli/</link>
            <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://wouters.sh/posts/professional/git-ignore-from-cli/</guid>
            <description>You can generate .gitignore files from the command line by using the api of gitignore.io .
To do this you need to create a git alias .
git config --global alias.ignore \ &amp;#39;!gi() { curl -sL https://www.gitignore.io/api/$@ ;}; gi&amp;#39; When you created the alias you have access to the git ignore command. If you run git ignore list you will get a list of supported languages, tools, os&amp;rsquo;s and applications.</description>
            <content type="html"><![CDATA[<p>You can generate .gitignore files from the command line by using the api of <a href="https://gitignore.io/" target="_blank">gitignore.io</a>
.</p>
<p>To do this you need to create a git <a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases" target="_blank">alias</a>
.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config --global alias.ignore <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">&#39;!gi() { curl -sL https://www.gitignore.io/api/$@ ;}; gi&#39;</span>
</code></pre></div><p>When you created the alias you have access to the <code>git ignore</code> command. If you run <code>git ignore list</code> you will get a list of supported languages, tools, os&rsquo;s and applications.</p>
<p>For example, running <code>git ignore python,visualstudiocode,osx</code> will dump a list of ignored files for Python, VSCode and OS X to <code>stdout</code>.</p>
<p>If you want to create the <code>.gitignore</code> file you need to redirect the <code>git ignore</code> command.</p>
<p>Taking the previous example, if you run command again but add redirection like this: <code>git ignore python,visualstudiocode,osx &gt; .gitgnore</code>, you will create a new .gitignore file. If you want to append to an existing file make sure you change the single <code>&gt;</code> to <code>&gt;&gt;</code>.</p>
]]></content>
        </item>
        
        <item>
            <title>Disable SSH on your EC2 instances</title>
            <link>https://wouters.sh/posts/professional/aws-disable-ssh/</link>
            <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://wouters.sh/posts/professional/aws-disable-ssh/</guid>
            <description>If you have to SSH into your servers, then your automation has failed.
I know, crazy&amp;hellip;
To make the transition to this mindset easier you could just disable access to port 22 in your instance security group configuration. This will highlight the things you still need to automate while still having the ability to enable access your instances to remedy immediate operational issues.
Disabling inbound SSH will stop you from cheating.</description>
            <content type="html"><![CDATA[<p><strong>If you have to SSH into your servers, then your automation has failed</strong>.</p>
<p>I know, crazy&hellip;</p>
<p>To make the transition to this mindset easier you could just disable access to port 22 in your instance security group configuration. This will highlight the things you still need to automate while still having the ability to enable access your instances to remedy immediate operational issues.</p>
<p>Disabling inbound SSH will stop you from cheating. You can&rsquo;t just log in and quickly fix the issue. You have to re-enable access to do this and hopefully this will become annoying enough to force you to get your automation in order.</p>
<p>This is both a frightening and useful thing I&rsquo;ve learned while doing automation in AWS.</p>
<p>as a note: <code>If your application relies on being able to push to a server via SSH, then disabling it might be a bad idea.</code></p>
]]></content>
        </item>
        
        <item>
            <title>Setting up an SSH server as a proxy</title>
            <link>https://wouters.sh/posts/professional/setting-up-ssh-server-proxy/</link>
            <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://wouters.sh/posts/professional/setting-up-ssh-server-proxy/</guid>
            <description>Recently I setup an SSH server at home. This allows me, besides the obvious, to create an SSH tunnel to encrypt my connections and circumvent restrictions. This is particularly useful on public Wi-Fi networks. These networks may block certain services and other people using the network might be less friendly.
Installing Your Linux server most likely already has openssh-server installed. If it hasn&amp;rsquo;t, installing SSH server is easy. Because I use CentOS the examples will reflect that.</description>
            <content type="html"><![CDATA[<p>Recently I setup an SSH server at home. This allows me, besides the obvious, to create an SSH tunnel to encrypt my connections and circumvent restrictions. This is particularly useful on public Wi-Fi networks. These networks may block certain services and other people using the network might be <a href="http://lifehacker.com/5906233/do-i-really-need-to-be-that-worried-about-security-when-im-using-public-wi-fi" target="_blank">less</a>
 friendly.</p>
<h3 id="installing">Installing</h3>
<p>Your Linux server most likely already has openssh-server installed. If it hasn&rsquo;t,
installing SSH server is easy. Because I use CentOS the examples will reflect that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo yum -y install openssh-server
</code></pre></div><p>Start the sshd service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo systemctl start sshd
</code></pre></div><p>Making sure it starts when the machine boots</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo systemctl enable sshd
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib/systemd/system/sshd.service.
</code></pre></div><p>Verifying the above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ systemctl status sshd
● sshd.service - OpenSSH server daemon
   Loaded: loaded <span style="color:#f92672">(</span>/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled<span style="color:#f92672">)</span>
   Active: active <span style="color:#f92672">(</span>running<span style="color:#f92672">)</span> since za 2017-09-09 18:18:35 UTC; 4s ago
     Docs: man:sshd<span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>
           man:sshd_config<span style="color:#f92672">(</span>5<span style="color:#f92672">)</span>
 Main PID: <span style="color:#ae81ff">2413</span> <span style="color:#f92672">(</span>sshd<span style="color:#f92672">)</span>
   CGroup: /system.slice/sshd.service
           └─2413 /usr/sbin/sshd -D -u0

sep <span style="color:#ae81ff">09</span> 18:18:35 localhost.localdomain systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Starting OpenSSH server daemon...
sep <span style="color:#ae81ff">09</span> 18:18:35 localhost.localdomain sshd<span style="color:#f92672">[</span>2413<span style="color:#f92672">]</span>: Server listening on 0.0.0.0 port 22.
sep <span style="color:#ae81ff">09</span> 18:18:35 localhost.localdomain sshd<span style="color:#f92672">[</span>2413<span style="color:#f92672">]</span>: Server listening on :: port 22.
sep <span style="color:#ae81ff">09</span> 18:18:35 localhost.localdomain systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Started OpenSSH server daemon.
</code></pre></div><p>That&rsquo;s it. As a note, if you previously setup firewall rules to block incoming connections make sure to allow incoming traffic on port 22. I will post the iptables rules that I use in a moment.</p>
<h3 id="configure-sshd">Configure sshd</h3>
<p>Before editing <code>/etc/ssh/sshd_config</code> we need to generate an SSH key. Github has a good <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank">tutorial</a>
 on this. Follow it to setup your SSH key. Use a different key for every machine that is going to connect to your SSH service. Once setup you can copy the key to the server with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ssh-copy-id wouter@server
</code></pre></div><p>Replace <code>server</code> with the hostname or ipadress of your ssh server and <code>user</code> with your user. You will be prompted to login with your password before the key gets copied. When the process is finished try logging in again to verify if it&rsquo;s working. Please refer to the Github <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank">tutorial</a>
 if you run in to problems.</p>
<p>There are some configuration settings you can apply that harden your ssh service. Use your favourite editor to edit <code>/etc/ssh/sshd_config</code>, I use vi.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo vi /etc/ssh/sshd_config
</code></pre></div><p>Add, edit or uncomment</p>
<pre tabindex="0"><code>PubkeyAuthentication yes
PasswordAuthentication no
ChallengeResponseAuthentication no
AllowTcpForwarding yes
</code></pre><p>This will <em>disable</em> password authentication, one-way-authentication and <em>enables</em> public key authentication and traffic forwarding. Keys are easily managed, unsniffable and uncrackable. The same can&rsquo;t be said about passwords.</p>
<p>The next one is up for discussion, allowing root access. Personally I disallow it, but <code>PermitRootLogin without-password</code> is a safe setting. This means <code>root</code> can only login with public key authentication. As mentioned, I&rsquo;ve set it to <code>PermitRootLogin no</code></p>
<p>Another good practice is to use a non-standard port for your ssh service. I haven&rsquo;t done it but this will significantly reduce the amount login tries from scriptkiddies. When choosing a port, have a look at what services <a href="https://nmap.org/" target="_blank">nmap</a>
 scans for on a default port scan.
To change to another port edit <code>/etc/ssh/sshd_config</code>:</p>
<pre tabindex="0"><code>Port 12345
</code></pre><p>Save your changes and verify the SSH configuration</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo sshd -t
</code></pre></div><p>This should return no errors. When it doesn&rsquo;t you can restart the SSH daemon</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo systemctl restart sshd
</code></pre></div><p>The new configuration is now active.</p>
<h3 id="setting-up-iptables">Setting up iptables</h3>
<p>Since I run my ssh service on the default port I am a target for <a href="https://en.wikipedia.org/wiki/Script_kiddie" target="_blank">scriptkiddies</a>
 trying to gain access to my machine. And since I want to tunnel my traffic when on public Wi-Fi I can&rsquo;t scope the access down to a few IP&rsquo;s.</p>
<p>CentOS comes with <code>firwalld</code>. I don&rsquo;t like <code>firewalld</code> so I disable it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.
Removed symlink /etc/systemd/system/basic.target.wants/firewalld.service.
$ sudo systemctl mask firewalld
Created symlink from /etc/systemd/system/firewalld.service to /dev/null.
</code></pre></div><p>Disabling the service deletes the symlink, so the unit file itself is not affected, but the service is not loaded at the next boot, when systemd reads /etc/systemd/system.</p>
<p>However, a disabled service can be loaded, and will be started if a service that depends on it is started; enable and disable only configure auto-start behaviour for units, and the state is easily overridden.</p>
<p>A masked service is one whose unit file is a symlink to /dev/null. This makes it &ldquo;impossible&rdquo; to load the service, even if it is required by another, enabled service.</p>
<p>When you mask a service, a symlink is created from /etc/systemd/system to /dev/null, leaving the original unit file elsewhere untouched. When you unmask a service the symlink is deleted.</p>
<p>With <code>firewalld</code> out of the way, I can apply my iptables script to setup the firewall.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>iptables -F                     <span style="color:#75715e"># flush rules</span>
iptables -X                     <span style="color:#75715e"># delete user added chains</span>
iptables -P FORWARD DROP        <span style="color:#75715e"># drop forwarding</span>
iptables -P INPUT DROP          <span style="color:#75715e"># drop incoming</span>
iptables -P OUTPUT ACCEPT       <span style="color:#75715e"># allow outgoing</span>

<span style="color:#75715e"># define custom chains</span>
iptables -N ssh_init
iptables -N ssh_throttle

iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT <span style="color:#75715e"># accept previously allowed traffic</span>
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP <span style="color:#75715e"># invalid packets get dropped</span>
iptables -A INPUT -i lo -j ACCEPT <span style="color:#75715e"># allow all traffic on the loopback interface</span>

<span style="color:#75715e"># ssh init</span>
iptables -A INPUT -s 0/0 -p tcp --dport <span style="color:#ae81ff">22</span> --syn -j ssh_init
iptables -A ssh_init -m recent --name ssh_input_trap --rcheck --seconds <span style="color:#ae81ff">60</span> --hitcount <span style="color:#ae81ff">3</span> --rttl -j DROP
iptables -A ssh_init -m recent --name ssh_input_trap --set -j RETURN

<span style="color:#75715e"># ssh throttle</span>
iptables -A INPUT -s 0/0 -p tcp --dport <span style="color:#ae81ff">22</span> --syn -j ssh_throttle
iptables -A ssh_throttle -m connlimit --connlimit-above <span style="color:#ae81ff">3</span> -j DROP
iptables -A ssh_throttle -m limit --limit 3/m --limit-burst <span style="color:#ae81ff">1</span> -j ACCEPT

</code></pre></div><p>To make the rules persistent you need the <code>iptables-services</code> package since we disabled <code>firewalld</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ yum -y install iptables-services
</code></pre></div><p>After installation you can run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo service iptables save
</code></pre></div><blockquote>
<p>note: If you run <code>docker</code> restart the docker service first before saving the rules. This will recreate the docker iptables rules</p>
</blockquote>
<p>These rules set the policy to drop all incoming packets except for the SYN packet on port 22. A SYN starts a connection, you&rsquo;ll usually only see it when the connection&rsquo;s being established. When someone sends three SYN packets in a minute, they get dropped. When they make more than three connections in a minute, they will get dropped. When the SYN is accepted a connection is established and the traffic will be allowed.</p>
<p>With these rules in place we can start using our SSH service.</p>
<h3 id="setting-up-an-ssh-tunnel">Setting up an SSH tunnel</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ssh -D <span style="color:#ae81ff">3000</span> -f -C -q -N wouter@miles
</code></pre></div><p>Let see what this command does.<br>
<code>-D 3000</code> This allocates a socket to listen on port 3000.<br>
<code>-f</code> Requests ssh to go to background just before command execution. <br>
<code>-C</code> Requests compression of all data.<br>
<code>-q</code> Quiet mode.<br>
<code>-N</code> Do not execute a remote command.<br>
<code>wouter@miles</code> user and the server.</p>
<p>With the tunnel up and running you need configure your browser to use it. In <code>Firefox</code> go to <code>preferences &gt; advanced &gt; network</code> and tick <code>manual proxy configuration</code>. Next set the <code>SOCKS Host</code> to <code>localhost</code> and <code>port</code> to <code>3000</code>. Also tick the <code>proxy dns when using socks5</code> box. <code>Firefox</code> is now ready to use the tunnel.</p>
]]></content>
        </item>
        
    </channel>
</rss>
